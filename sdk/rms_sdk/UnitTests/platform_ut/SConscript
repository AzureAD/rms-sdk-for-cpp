import os.path
from build_config import *

Import("""
    build_arch
    configuration
    lib_suffix
    platform
    qt_lib_path
    rms_env
    target_arch
""")

Import("""
    googletest_lib
    crypto_api_obj
    crypto_obj
    crypto_platform_crypto_obj
    crypto_platform_keystorage_obj
    crypto_platform_logger_obj
    crypto_platform_settings_obj
    rms_platform_filesystem_obj
    rms_platform_http_obj
    rms_platform_json_obj
    rms_platform_logger_obj
    rms_platform_settings_obj
    rms_platform_xml_obj
""")

src_files = Glob('*.cpp')
src_files += Glob(configuration + '/*.cpp')

rmsplatform_env = rms_env.Clone()

rmsplatform_env.Append(CPPPATH=Split('#sdk/rmscrypto_sdk/CryptoAPI')) 
rmsplatform_env.Append(CCFLAGS=Split('-DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_XML_LIB -DQT_TESTLIB_LIB'))

srcdir = '\\\"' + Dir('.').srcnode().abspath.replace('\\','/') + '/\\\"'
rmsplatform_env.Append(CPPDEFINES = { 'SRCDIR' : srcdir })
  
lib_path = [
      qt_lib_path, 
      '#bin/' + configuration + '/' + target_arch + '/sdk',
  ]

objects = [
      crypto_api_obj,
      crypto_obj,
      crypto_platform_crypto_obj,
      crypto_platform_keystorage_obj,
      crypto_platform_logger_obj,
      crypto_platform_settings_obj,
      rms_platform_filesystem_obj,
      rms_platform_http_obj,
      rms_platform_json_obj,
      rms_platform_logger_obj,
      rms_platform_settings_obj,
      rms_platform_xml_obj,
]
libs = [
      'Qt5Core' + lib_suffix,
      'Qt5Test' + lib_suffix,
      'Qt5Network' + lib_suffix,
      'Qt5Xml' + lib_suffix,
      'Qt5XmlPatterns' + lib_suffix,
      'rms',
      googletest_lib,
]

if platform == 'win32':
  rmsplatform_env.Append(LINKFLAGS=Split('/NOLOGO /DYNAMICBASE /NXCOMPAT /SUBSYSTEM:CONSOLE'))
  if configuration == 'debug':
    rmsplatform_env.Append(LINKFLAGS=Split('/DEBUG'))
  elif configuration == 'release':
    rmsplatform_env.Append(LINKFLAGS=Split('/INCREMENTAL:NO'))
  lib_path += [
      '#third_party/lib/eay',
  ]
  libs += [      
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
      'dnsapi',
  ]  
elif platform == '__linux__':
  rmsplatform_env.Append(CPPPATH='/usr/include/glib-2.0/')
  rmsplatform_env.Append(CPPPATH='/usr/include/libsecret-1/')
  rmsplatform_env.Append(CPPPATH='/usr/lib/x86_64-linux-gnu/glib-2.0/include/')
elif platform == 'darwin':
  libs += [
    'ssl',
    'crypto',
    'resolv',
  ]

platform_ut_obj = rmsplatform_env.Object(source = src_files)
platform_ut_test = rmsplatform_env.Program(target = "platform_ut", \
    source = [platform_ut_obj] + objects, LIBS = [libs], LIBPATH = lib_path)
Return('platform_ut_test')