Import("""
    build_flavor
    crypto_obj
    crypto_platform_keystorage_obj
    crypto_platform_crypto_obj
    crypto_platform_logger_obj
    crypto_platform_settings_obj
    crypto_api_obj
    lib_path
    lib_suffix
    platform
    qt_lib_path
    rmscrypto_env
    SetupUtMocs
""")

rmscrypto_ut_env =  rmscrypto_env.Clone()

src_files = Glob('*.cpp')
srcdir = Dir('.').srcnode().abspath

SetupUtMocs(srcdir, build_flavor)

src_files += Glob(build_flavor + '/*.cpp')

objects = [
    crypto_api_obj,
    crypto_obj,
    crypto_platform_crypto_obj,
    crypto_platform_keystorage_obj,
    crypto_platform_logger_obj,
    crypto_platform_settings_obj,
]
libs = [
    'Qt5Core' + lib_suffix,
    'Qt5Test' + lib_suffix,
    'Qt5Widgets' + lib_suffix,
    'Qt5Gui' + lib_suffix,
] 

rmscrypto_ut_env.Append(CPPDEFINES = { 'SRCDIR' : "\\\"" + srcdir + "/\\\"" })
rmscrypto_ut_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')
rmscrypto_ut_env.Append(CCFLAGS=Split('-DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_TESTLIB_LIB'))
rmscrypto_ut_env.Append(CXXFLAGS=Split('-DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_TESTLIB_LIB'))
if platform == 'win32':
  libs += [
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
  ]
elif platform == 'linux2':
  libs +=[
      'ssl',
      'crypto',
      'secret-1',
      'glib-2.0',
      'pthread',
      'GL',
  ]
elif platform == 'darwin':
  libs +=[
      'ssl'
      'crypto'
  ]

rmscrypto_ut_obj = rmscrypto_ut_env.Object(source = src_files)
unittests_exe = rmscrypto_ut_env.Program(target = "unittests", source=[rmscrypto_ut_obj] + objects, LIBS = [libs], LIBPATH=lib_path)
Return('unittests_exe')