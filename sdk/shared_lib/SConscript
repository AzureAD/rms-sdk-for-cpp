Import("""
    build_arch
    build_flavor
    lib_path
    lib_suffix
    platform
    qt_lib_path
    env
    target_arch
""")

Import("""
    common_obj
    consent_obj
    core_obj
    crypto_obj
    crypto_api_obj
    crypto_platform_crypto_obj
    crypto_platform_keystorage_obj
    crypto_platform_logger_obj
    crypto_platform_settings_obj
    easylogger_obj
    googletest_lib
    json_obj
    logger_obj
    modernapi_obj
    pfile_obj
    profile_obj
    office_obj
    fileapi_obj
    rms_platform_filesystem_obj
    rms_platform_http_obj
    rms_platform_json_obj
    rms_platform_logger_obj
    rms_platform_settings_obj
    rms_platform_xml_obj
    restclients_obj
""")

rmsdll_env = env.Clone()

rmsdll_env.Append(CCFLAGS=Split('-DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))
rmsdll_env.Append(CXXFLAGS=Split('-DQT_PLUGIN -DQT_XML_LIB -DQT_XMLPATTERNS_LIB -DQT_NETWORK_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB'))

src_files = Glob('*.cpp')
rmsdll_env.Append(CPPPATH='#sdk/rmscrypto_sdk/CryptoAPI')

objects = [  
  crypto_obj,
  crypto_api_obj,
  crypto_platform_keystorage_obj,
  crypto_platform_crypto_obj,
  crypto_platform_logger_obj,
  crypto_platform_settings_obj,
  common_obj,
  consent_obj,
  core_obj,
  easylogger_obj,
  logger_obj,
  profile_obj,
  pfile_obj,
  json_obj,
  modernapi_obj,
  rms_platform_filesystem_obj,
  rms_platform_http_obj,
  rms_platform_json_obj,
  rms_platform_logger_obj,
  rms_platform_settings_obj,
  rms_platform_xml_obj,
  restclients_obj,
]
libs = [
  'Qt5Core' + lib_suffix,
  'Qt5Network' + lib_suffix,
  'Qt5Widgets' + lib_suffix,
  'Qt5Xml' + lib_suffix,
  'Qt5XmlPatterns' + lib_suffix,
  googletest_lib,
]

if platform == 'win32':
  libs += [
      'libeay32',
      'ssleay32',
      'Advapi32',
      'Gdi32',
      'User32',
      'legacy_stdio_definitions',
      'DnsAPI',
  ]  
elif platform == 'linux2':
  rmsdll_env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME']=1
  libs += [
      'ssl',
      'crypto',
      'secret-1',
      'glib-2.0',
  ]
elif platform == 'darwin':
  libs += 'ssl'
  libs += 'crypto'

rms_lib = rmsdll_env.SharedLibrary(target = "rms", source = objects, LIBS = libs, LIBPATH = lib_path)

# File API
rmsfiledll_env = rmsdll_env.Clone()

rmsfiledll_env.Append(CCFLAGS='-DQT_NO_KEYWORDS')
rmsfiledll_env.Append(CXXFLAGS='-DQT_NO_KEYWORDS')
objects += [
    fileapi_obj,
    office_obj,
]

if platform == 'win32':
    lib_path += [
        '#third_party/lib/Libgsf',
    ]
    libs += [
        'libgthread-2.0-0',
        'libiconv-2',
        'libintl-8',
        'liblzma-5',
        'libpcre-1',
        'libwinpthread-1',
        'libxml2-2',
        'zlib1',
        'libbz2-1',
        'libffi-6',
        'libgio-2.0-0',
        'libglib-2.0-0',
        'libgmodule-2.0-0',
        'libgobject-2.0-0',
        'libgsf-1-114',
    ]
elif platform == 'linux2':
    rmsfiledll_env.ParseConfig('pkg-config --cflags --libs libgsf-1')

rmsfile_lib = rmsfiledll_env.SharedLibrary(target = "rmsfile", source = objects, LIBS = libs, LIBPATH = lib_path)

Return('rms_lib rmsfile_lib')